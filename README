Endoscope, as the name suggests, is a tool to poke around in a Qt application 
and to some extend also manipulate it. Endoscope uses the LD_PRELOAD trick 
known from KDX to hook into an application at runtime and provide access to a 
bunch of interesting information. The following already works:
- browsing the QObject tree (known from the model section in our trainings, 
but with live updates)
- viewing and to some extend editing of QObject static and dynamic properties 
(similar to designer), when working with QML you quickly don't want to miss 
that anymore
- viewing and calling of slots of a QObject (similar to qdbusviewer)
- viewing of other introspectable QObject elements such as signals, enums and 
class infos
- listing of all inbound and outbound signal/slot connections of a QObject
- live preview of widgets, sometimes useful for finding layouting issues
- viewing of the content of any QAIM, very useful when debugging a proxy model 
chain for example
- browsing of the QGV item tree of any QGV scene
- complete java script debugger, attachable to any QScriptEngine (including 
the usually not accessible one used by QML internally), thanks to 
QScriptEngineDebugger
- HTML/CSS/DOM/JS introspection/editing/profiling on any QWebPage, thanks to 
QWebInspector, will make fixing of rendering issues in KMail's message viewer 
much less painful for example

Requirements for compiling and using it:
- Qt, only tested with 4.7, 4.6 should work too, 4.5 and earlier most likely not
- Boost, any version should do
- KDE libraries 4.5+, mostly out of my own lazyness, the only thing really 
needed from there are some of Steve's proxy models, easily copyable.
- Linux, as there is no preloading implementation for any other OS yet
- cmake

Usage is similar to valgrind: "endoscope <app> <app-args>"
Due to the preloading you most likely need to use matching Qt versions for 
Endoscope and the analyzed application, also it might not work with static 
builds.

While originally supposed to help with QML debugging, it quickly diverged into 
a more general purpose Qt debugging tool, and accumulated a big feature 
wish/idea list:
- monitor signal emission (similar to qdbusviewer)
- QGV item property viewing/editing (so far it's limited to QObject based QGV 
items, which helps for QML but probably not with most "normal" QGVs)
- property editor for more advanced types (afaik KDTools has something like that)
- shoot-a-bug integration, for widgets and QGV items, selecting the 
corresponding object in Endoscope
- layout visualization like in designer
- a visual state machine viewer/debugger/editor
- runtime-attachable model test, code is already there, including reporting 
without asserting, but is too slow to be enabled by default as long as it 
still tries to check all the internal models of Endoscope as well
- integration of Steve's proxy model tests and model test recorder
- integration of Steve's model development tool "Catwalk" (catwalk: something 
for looking at cute models), including things like a proxy hierarchy viewer
- a WebInspector/Firebug like QSS debugger
- QNAM proxy: http://www.kdedevelopers.org/node/4210
- various statistical measurements and visualizations for profiling, eg. 
number of created objects of a certain type, number of send signals/events, 
timer frequencies, etc, mostly interesting for QML where there are no good 
high-level profiling tools yet.
- split the part that has to run in the process of the analyzed application 
and the frontend, to allow inspecting non-gui Qt apps as well as remote debugging

